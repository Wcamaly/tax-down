// Generated by Qodo Gen

import { SalaryBalance } from "../SalaryBalance";
import { Currency, ISalaryRecord, RecordType, SalaryRecord } from "../SalaryRecord";

describe('SalaryBalance', () => {

  // Constructor initializes all required fields with provided payload values
  it('should initialize all fields when payload is provided with all values', () => {
    const payload = {
      id: '123',
      customerId: 'cust-123',
      balance: 1000,
      currency: 'USD',
      lastUpdated: new Date('2023-01-01'),
      lastRecordId: 'rec-123',
      createdAt: new Date('2023-01-01')
    };

    const salaryBalance = new SalaryBalance(payload);

    expect(salaryBalance.id).toBe(payload.id);
    expect(salaryBalance.customerId).toBe(payload.customerId);
    expect(salaryBalance.balance).toBe(payload.balance);
    expect(salaryBalance.currency).toBe(payload.currency);
    expect(salaryBalance.lastUpdated).toBe(payload.lastUpdated);
    expect(salaryBalance.lastRecordId).toBe(payload.lastRecordId);
    expect(salaryBalance.createdAt).toBe(payload.createdAt);
  });

  it('should toJSON return the salary balance data', () => {
    const payload = {
      id: '123',
      customerId: 'cust-123',
      balance: 1000,
      currency: 'USD',
      lastUpdated: new Date('2023-01-01'),
      lastRecordId: 'rec-123',
      createdAt: new Date('2023-01-01')
    };

    const salaryBalance = new SalaryBalance(payload);

    expect(salaryBalance.toJSON()).toEqual(payload);
  })

  it('should fromJSON return the salary balance instance', () => {
    const payload = {
      id: '123',
      customerId: 'cust-123',
      balance: 1000,
      currency: 'USD',
      lastUpdated: new Date('2023-01-01'),
      lastRecordId: 'rec-123',
      createdAt: new Date('2023-01-01')
    };

    const salaryBalance = SalaryBalance.fromJSON(payload);

    expect(salaryBalance.id).toBe(payload.id);
    expect(salaryBalance.customerId).toBe(payload.customerId);
    expect(salaryBalance.balance).toBe(payload.balance);
    expect(salaryBalance.currency).toBe(payload.currency);
    expect(salaryBalance.lastUpdated).toBe(payload.lastUpdated);
    expect(salaryBalance.lastRecordId).toBe(payload.lastRecordId);
    expect(salaryBalance.createdAt).toBe(payload.createdAt);
    
  })

  it ('should update balance when salary record is a deposit', () => {
    const payload = {
      id: '123',
      customerId: 'cust-123',
      balance: 1000,
      currency: 'USD',
      lastUpdated: new Date('2023-01-01'),
      lastRecordId: 'rec-123',
      createdAt: new Date('2023-01-01')
    };

    const salaryBalance = new SalaryBalance(payload);

    const salaryRecord: ISalaryRecord = {
      id: 'rec-123',
      customerId: 'cust-123',
      amount: 100,
      currency: Currency.USD,
      type: RecordType.DEPOSIT,
      description: 'Deposit',
      createdAt: new Date('2023-01-01')
    };

    salaryBalance.updateBalance(new SalaryRecord(salaryRecord));

    expect(salaryBalance.balance).toBe(1100);
    expect(salaryBalance.lastUpdated).not.toBe(payload.lastUpdated);
    expect(salaryBalance.lastRecordId).toBe(salaryRecord.id);
  })

  it('should update balance when salary record is a withdrawal', () => {
    const payload = {
      id: '123',
      customerId: 'cust-123',
      balance: 1000,
      currency: 'USD',
      lastUpdated: new Date('2023-01-01'),
      lastRecordId: 'rec-123',
      createdAt: new Date('2023-01-01')
    };
    const salatyBalance = new SalaryBalance(payload);

    const salaryRecord: ISalaryRecord = {
      id: 'rec-123',
      customerId: 'cust-123',
      amount: 100,
      currency: Currency.USD,
      type: RecordType.WITHDRAWAL,
      description: 'Withdrawal',
      createdAt: new Date('2023-01-01')
    };

    salatyBalance.updateBalance(new SalaryRecord(salaryRecord));

    expect(salatyBalance.balance).toBe(900);
    expect(salatyBalance.lastUpdated).not.toBe(payload.lastUpdated);
    expect(salatyBalance.lastRecordId).toBe(salaryRecord.id);
  })

});
