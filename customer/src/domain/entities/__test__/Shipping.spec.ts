// Generated by Qodo Gen

import { Shipping } from "../Shipping";

describe('Shipping', () => {

  // Constructor correctly initializes all shipping properties from valid payload
  it('should initialize all properties when constructed with valid payload', () => {
    const payload = {
      customerId: '123',
      id: '456',
      addressLine: '123 Main St',
      city: 'Boston',
      state: 'MA', 
      country: 'USA',
      postalCode: '02108',
      isDefault: true
    };

    const shipping = new Shipping(payload);

    expect(shipping.id).toBe('456');
    expect(shipping.customerId).toBe('123');
    expect(shipping.addressLine).toBe('123 Main St');
    expect(shipping.city).toBe('Boston');
    expect(shipping.state).toBe('MA');
    expect(shipping.country).toBe('USA');
    expect(shipping.postalCode).toBe('02108');
    expect(shipping.isDefault).toBe(true);
  });

  // Constructor handles empty strings for address fields
  it('should accept empty strings for address fields', () => {
    const payload = {
      customerId: '123',
      addressLine: '',
      city: '',
      state: '',
      country: '',
      postalCode: '',
      isDefault: false
    };

    const shipping = new Shipping(payload);

    expect(shipping.addressLine).toBe('');
    expect(shipping.city).toBe('');
    expect(shipping.state).toBe('');
    expect(shipping.country).toBe('');
    expect(shipping.postalCode).toBe('');
  });

  // toJSON returns all shipping properties
  it('should return all properties when toJSON is called', () => {
    const payload = {
      customerId: '123',
      id: '456',
      addressLine: '123 Main St',
      city: 'Boston',
      state: 'MA', 
      country: 'USA',
      postalCode: '02108',
      isDefault: true
    };

    const shipping = new Shipping(payload);
    const json = shipping.toJSON();

    expect(json.id).toBe('456');
    expect(json.customerId).toBe('123');
    expect(json.addressLine).toBe('123 Main St');
    expect(json.city).toBe('Boston');
    expect(json.state).toBe('MA');
    expect(json.country).toBe('USA');
    expect(json.postalCode).toBe('02108');
    expect(json.isDefault).toBe(true);
  });

  // fromJSON returns a new Shipping instance with all properties
  it('should return a new Shipping instance when fromJSON is called', () => {
    const payload = {
      customerId: '123',
      id: '456',
      addressLine: '123 Main St',
      city: 'Boston',
      state: 'MA', 
      country: 'USA',
      postalCode: '02108',
      isDefault: true
    };

    const shipping = Shipping.fromJSON(payload);

    expect(shipping.id).toBe('456');
    expect(shipping.customerId).toBe('123');
    expect(shipping.addressLine).toBe('123 Main St');
    expect(shipping.city).toBe('Boston');
    expect(shipping.state).toBe('MA');
    expect(shipping.country).toBe('USA');
    expect(shipping.postalCode).toBe('02108');
    expect(shipping.isDefault).toBe(true);
  });
});
