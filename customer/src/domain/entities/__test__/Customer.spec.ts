// Generated by Qodo Gen

import exp from "constants";
import { Contact, IContact, IPhone } from "../../objects/Contact";
import { Person } from "../../objects/Person";
import { Customer, ICustomer } from "../Customer";

describe('Customer', () => {

  // Customer instance creation with all required fields
  it('should create customer instance when all required fields are provided', () => {
    const mockCustomerData: ICustomer = {
      id: 'customer1',
      cognitoId: 'cognito123',
      person: {
        firstName: 'John',
        lastName: 'Doe'
      },
      contact: {
        mainEmail: 'john@example.com',
        phones: []
      },
      shippingIds: ['shipping1'],
      orderIds: ['order1'],
      createdAt: new Date()
    };

    const customer = new Customer(mockCustomerData);

    expect(customer.cognitoId).toBe(mockCustomerData.cognitoId);
    expect(customer.person).toBeInstanceOf(Person);
    expect(customer.contact).toBeInstanceOf(Contact);
    expect(customer.shippingIds).toEqual(mockCustomerData.shippingIds);
    expect(customer.orderIds).toEqual(mockCustomerData.orderIds);
    expect(customer.createdAt).toBeDefined();
  });

  // Customer creation with missing required fields
  it('should throw error when creating customer with missing required fields', () => {
    const invalidCustomerData = {
      
      person: {
        firstName: 'John'
      },
      shippingIds: [],
      orderIds: []
    };

    expect(() => {
      new Customer(invalidCustomerData as unknown as ICustomer);
    }).toThrow();
  });

  it('should toJSON return the customer data', () => {
    const mockCustomerData: ICustomer = {
      id: 'customer1',
      cognitoId: 'cognito123',
      person: {
        firstName: 'John',
        lastName: 'Doe',
        birthDate: new Date(),
        documentType: 'ID',
        documentNumber: '123456',
        nationality: 'IT'
      },
      contact: {
        mainEmail: 'custom@email.com',
        phones: [],
        secondaryEmail: 'custom2@email.com' 
      },
      shippingIds: ['shipping1'],
      orderIds: ['order1'],
      createdAt: new Date()
    };

    const customer = new Customer(mockCustomerData);
    const customerData = customer.toJSON();
    expect(customerData).toEqual(mockCustomerData);
  });

  it('should fromJSON return the customer instance', () => {
    const mockCustomerData: ICustomer = {
      id: 'customer1',
      cognitoId: 'cognito123',
      person: {
        firstName: 'John',
        lastName: 'Doe'
      },
      contact: {
        mainEmail: 'customer@email.com',
        phones: []
      },
      shippingIds: ['shipping1'],
      orderIds: ['order1'],
      createdAt: new Date()
    };

    const customer = Customer.fromJSON(mockCustomerData);
    expect(customer).toBeInstanceOf(Customer);
    expect(customer.cognitoId).toBe(mockCustomerData.cognitoId);
    expect(customer.person).toBeInstanceOf(Person);

  })

  it('should add contact to customer', () => {
    const mockCustomerData: ICustomer = {
      id: 'customer1',
      cognitoId: 'cognito123',
      person: {
        firstName: 'John',
        lastName: 'Doe'
      },
      shippingIds: ['shipping1'],
      orderIds: ['order1'],
      createdAt: new Date()
    };

    const customer = new Customer(mockCustomerData);
    const mockContact: IContact = {
      mainEmail: 'custom@email.com',
      phones: [
        {
          number: '1234567890',
          countryCode: '1' 
        }
      ]
    };
    customer.addContact(new Contact(mockContact));
    expect(customer.contact).toBeInstanceOf(Contact);
    expect(customer.contact?.mainEmail).toBe(mockContact.mainEmail);
    expect(customer.contact?.phones).toHaveLength(1);
  });  

  it('should add person to customer', () => {
    const mockCustomerData: ICustomer = {
      id: 'customer1',
      cognitoId: 'cognito123',
      person: {
        firstName: 'John',
        lastName: 'Doe'
      },

      shippingIds: ['shipping1'],
      orderIds: ['order1'],
      createdAt: new Date()
    };

    const customer = new Customer(mockCustomerData);
    const mockPerson = {
      firstName: 'Jane',
      lastName: 'Doe'
    };
    customer.addPerson(new Person(mockPerson));
    expect(customer.person).toBeInstanceOf(Person);
    expect(customer.person.firstName).toBe(mockPerson.firstName);
    expect(customer.person.lastName).toBe(mockPerson.lastName);

  })

  it('should add phone to customer', () => {
    const mockCustomerData: ICustomer = {
      id: 'customer1',
      cognitoId: 'cognito123',
      person: {
        firstName: 'John',
        lastName: 'Doe'
      },
      contact: {
        mainEmail: 'customer@email.com',
        phones: []
      },
      shippingIds: ['shipping1'],
      orderIds: ['order1'],
      createdAt: new Date()
    };

    const customer = new Customer(mockCustomerData);
    const phone : IPhone = {
      number: '1234567890',
      countryCode: '1'
    }
    customer.addPhone(phone);
    expect(customer.contact).toBeInstanceOf(Contact);
    expect(customer.contact?.phones).toHaveLength(1);
    expect(customer.contact?.phones[0].number).toBe(phone.number);

  })

  it('shoud add phone to customer throws error when contact is not present', () => {
    const mockCustomerData: ICustomer = {
      id: 'customer1',
      cognitoId: 'cognito123',
      person: {
        firstName: 'John',
        lastName: 'Doe'
      },
      shippingIds: ['shipping1'],
      orderIds: ['order1'],
      createdAt: new Date()
    };

    const customer = new Customer(mockCustomerData);
    const phone : IPhone = {
      number: '1234567890',
      countryCode: '1'
    }
    expect(() => {
      customer.addPhone(phone);
    }).toThrow();
  })
});
