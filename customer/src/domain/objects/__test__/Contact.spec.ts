// Generated by Qodo Gen

import { Contact, IContact, Phone } from "../Contact";

describe('Contact', () => {

  // Create Contact instance with mainEmail and validate properties initialization
  it('should initialize contact with mainEmail and optional properties', () => {
    const payload: IContact = {
      mainEmail: 'test@email.com',
      phones: [{number: '123456789', countryCode: '1'}],
      secondaryEmail: 'secondary@email.com'
    };

    const contact = new Contact(payload);

    expect(contact.mainEmail).toBe('test@email.com');
    expect(contact.phones).toHaveLength(1);
    expect(contact.phones[0]).toBeInstanceOf(Phone);
    expect(contact.phones[0].number).toBe('123456789');
    expect(contact.secondaryEmail).toBe('secondary@email.com');
  });

  // Create Contact without phones array in payload
  it('should initialize contact with empty phones array when phones not provided', () => {
    const payload = {
      mainEmail: 'test@email.com'
    };

    const contact = new Contact(payload);

    expect(contact.mainEmail).toBe('test@email.com');
    expect(contact.phones).toEqual([]);
    expect(contact.secondaryEmail).toBeUndefined();
  });

  it('should add phone to contact', () => {
    const payload = {
      mainEmail: '',
      phones: [],
    };

    const contact = new Contact(payload);
    contact.addPhone({number: '123456789', countryCode: '1'});
    expect(contact.phones).toHaveLength(1);
    expect(contact.phones[0].number).toBe('123456789');
  })

  it('should remove phone from contact', () => {
    const payload = {
      mainEmail: '',
      phones: [{number: '123456789', countryCode: '1'}],
    };

    const contact = new Contact(payload);
    contact.removePhone({number: '123456789', countryCode: '1'});
    expect(contact.phones).toHaveLength(0);
  })

  it('should toJSON return the contact data', () => {
    const payload = {
      mainEmail: '',
      phones: [{number: '123456789', countryCode: '1'}],
      secondaryEmail: 'email@email.com',
    };

    const contact = new Contact(payload);
    expect(contact.toJSON()).toEqual(payload);
  });

});
