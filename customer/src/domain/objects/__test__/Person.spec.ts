// Generated by Qodo Gen

import { Person } from "../Person";

describe('Person', () => {

  // Create Person instance with all required fields (firstName, lastName)
  it('should create person with required fields when providing firstName and lastName', () => {
    const person = new Person({
      firstName: 'John',
      lastName: 'Doe'
    });

    expect(person.firstName).toBe('John');
    expect(person.lastName).toBe('Doe');
    expect(person.getFullName()).toBe('John Doe');
  });

  // Create Person with empty strings for firstName/lastName
  it('should create person with empty strings when firstName and lastName are empty', () => {
    const person = new Person({
      firstName: '',
      lastName: ''
    });

    expect(person.firstName).toBe('');
    expect(person.lastName).toBe('');
    expect(person.getFullName()).toBe(' ');
  });

  // Create Person with all fields
  it('should create person with all fields when providing all values', () => {
    const person = new Person({
      firstName: 'John',
      lastName: 'Doe',
      birthDate: new Date('1990-01-01'),
      documentType: 'ID',
      documentNumber: '123456',
    });

    expect(person.firstName).toBe('John');
    expect(person.lastName).toBe('Doe');
    expect(person.birthDate).toEqual(new Date('1990-01-01'));
    expect(person.documentType).toBe('ID');
    expect(person.documentNumber).toBe
  });

  it ('should toJSON return the person data', () => {
    const person = new Person({
      firstName: 'John',
      lastName: 'Doe',
      birthDate: new Date('1990-01-01'),
      documentType: 'ID',
      documentNumber: '123456',
    });

    expect(person.toJSON()).toEqual({
      firstName: 'John',
      lastName: 'Doe',
      birthDate: new Date('1990-01-01'),
      documentType: 'ID',
      documentNumber: '123456',
    });
  });


  it('should fromJSON return the person instance', () => {
    const payload = {
      firstName: 'John',
      lastName: 'Doe',
      birthDate: new Date('1990-01-01'),
      documentType: 'ID',
      documentNumber: '123456',
    };

    const person = Person.fromJSON(payload);

    expect(person.firstName).toBe(payload.firstName);
    expect(person.lastName).toBe(payload.lastName);
    expect(person.birthDate).toEqual(payload.birthDate);
  });

  it(' should getFullName return the full name', () => {
    const person = new Person({
      firstName: 'John',
      lastName: 'Doe'
    });

    expect(person.getFullName()).toBe('John Doe');
  });

});
