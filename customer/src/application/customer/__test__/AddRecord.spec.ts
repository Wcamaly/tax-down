// Generated by Qodo Gen

import exp from "constants";
import { Currency, RecordType } from "../../../domain/entities/SalaryRecord";
import { ISalaryBalanceRepository } from "../../../domain/repositories/ISalaryBalance.repository";
import { ISalaryRecordRepository } from "../../../domain/repositories/ISalatyRecord";

import { AddRecordUsecase } from "../AddRecord";
import { SalaryRecordReq } from "../../../infrastructure/common/dto/salaryRecord.dto";

describe('AddRecordUsecase', () => {

  // Successfully creates salary record and updates balance when valid data is provided
  it('should create salary record and update balance when valid data provided', async () => {
    const mockSalaryRecordRepo = {
      createSalaryRecord: jest.fn()
    };

    const mockSalaryBalanceRepo = {
      getSalaryBalance: jest.fn(),
      updateSalaryBalance: jest.fn()
    };

    const usecase = new AddRecordUsecase(
      mockSalaryRecordRepo as unknown as ISalaryRecordRepository,
      mockSalaryBalanceRepo as unknown as ISalaryBalanceRepository
    );

    const salaryRecord = new SalaryRecordReq(
      'customer-1',
      1000,
      Currency.USD,
      RecordType.WITHDRAWAL,
      'Salary payment',
      'record-1'
    );

    const mockBalance = {
      updateBalance: jest.fn()
    };

    const salaryRecordMock = salaryRecord.toSalaryRecord()

    mockSalaryBalanceRepo.getSalaryBalance.mockResolvedValue(mockBalance);
    mockSalaryRecordRepo.createSalaryRecord.mockResolvedValue(salaryRecordMock);

    const result = await usecase.execute(salaryRecord);

    expect(mockSalaryBalanceRepo.getSalaryBalance).toHaveBeenCalledWith('customer-1');
    expect(mockSalaryRecordRepo.createSalaryRecord).toHaveBeenCalledWith(salaryRecordMock);
    expect(mockBalance.updateBalance).toHaveBeenCalled();
    expect(mockSalaryBalanceRepo.updateSalaryBalance).toHaveBeenCalledWith(mockBalance);
    expect(result.customerId).toBe('customer-1');
    expect(result.amount).toBe(1000);
    expect(result.currency).toBe(Currency.USD);
    expect(result.type).toBe(RecordType.WITHDRAWAL);
    expect(result.description).toBe('Salary payment');
    expect(result.id).toBeDefined();
    expect(result.createdAt).toBeDefined();
  });

  // Throws error when salary balance not found for customer
  it('should throw error when salary balance not found', async () => {
    const mockSalaryRecordRepo = {
      createSalaryRecord: jest.fn()
    };

    const mockSalaryBalanceRepo = {
      getSalaryBalance: jest.fn().mockResolvedValue(null)
    };

    const usecase = new AddRecordUsecase(
      mockSalaryRecordRepo as unknown as ISalaryRecordRepository,
      mockSalaryBalanceRepo as unknown as ISalaryBalanceRepository
    );

    const salaryRecord = new SalaryRecordReq(
      'customer-1',
      1000,
      Currency.USD,
      RecordType.DEPOSIT,
      'Salary payment'
    );

    await expect(usecase.execute(salaryRecord)).rejects.toThrow('Salary balance not found');
    expect(mockSalaryBalanceRepo.getSalaryBalance).toHaveBeenCalledWith('customer-1');
    expect(mockSalaryRecordRepo.createSalaryRecord).not.toHaveBeenCalled();
  });
});
